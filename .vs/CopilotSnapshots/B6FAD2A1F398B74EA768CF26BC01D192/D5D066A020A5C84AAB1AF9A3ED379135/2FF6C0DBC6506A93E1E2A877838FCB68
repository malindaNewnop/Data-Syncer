using System;
using System.ServiceProcess;
using syncer.core.Data;
using syncer.core.Services;
using syncer.core.Interfaces;

namespace seyncer.service
{
    public partial class DataSyncerService : ServiceBase
    {
        private IDataRepository? _dataRepository;
        private IFileTransferService? _fileTransferService;
        private ILoggingService? _loggingService;
        private ISyncEngine? _syncEngine;
        private JobSchedulerService? _jobScheduler;

        public DataSyncerService()
        {
            InitializeComponent();
            this.ServiceName = "DataSyncerService";
            this.CanStop = true;
            this.CanPauseAndContinue = false;
        }

        protected override void OnStart(string[] args)
        {
            try
            {
                // Initialize services
                _loggingService = new FileLoggingService();
                _dataRepository = new JsonDataRepository();
                _fileTransferService = new LocalFileTransferService();
                _syncEngine = new SyncEngine(_fileTransferService, _loggingService, _dataRepository);
                _jobScheduler = new JobSchedulerService(_dataRepository, _syncEngine, _loggingService);

                // Start the job scheduler
                _jobScheduler.Start();

                _loggingService.LogInfo("DataSyncer service started successfully");
            }
            catch (Exception ex)
            {
                _loggingService?.LogError($"Failed to start DataSyncer service: {ex.Message}");
                
                // Write to Windows Event Log as fallback
                using (var eventLog = new EventLog("Application"))
                {
                    eventLog.Source = "DataSyncerService";
                    eventLog.WriteEntry($"Failed to start DataSyncer service: {ex.Message}", 
                        EventLogEntryType.Error);
                }
                
                throw;
            }
        }

        protected override void OnStop()
        {
            try
            {
                _loggingService?.LogInfo("DataSyncer service stopping...");

                // Stop the job scheduler
                _jobScheduler?.Stop();

                // Stop any running jobs
                if (_syncEngine != null && _dataRepository != null)
                {
                    var jobs = _dataRepository.GetAllJobs();
                    foreach (var job in jobs)
                    {
                        if (_syncEngine.IsJobRunning(job.Id))
                        {
                            _syncEngine.StopJob(job.Id);
                            _loggingService?.LogInfo($"Stopped running job: {job.JobName}");
                        }
                    }
                }

                // Cleanup
                _jobScheduler?.Dispose();
                _fileTransferService?.Disconnect();

                _loggingService?.LogInfo("DataSyncer service stopped successfully");
            }
            catch (Exception ex)
            {
                _loggingService?.LogError($"Error stopping DataSyncer service: {ex.Message}");
                
                // Write to Windows Event Log as fallback
                using (var eventLog = new EventLog("Application"))
                {
                    eventLog.Source = "DataSyncerService";
                    eventLog.WriteEntry($"Error stopping DataSyncer service: {ex.Message}", 
                        EventLogEntryType.Error);
                }
            }
        }

        protected override void OnShutdown()
        {
            OnStop();
        }
    }
}
