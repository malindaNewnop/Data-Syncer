using System;
using System.Threading.Tasks;
using syncer.core.Models;

namespace syncer.core.Interfaces
{
    /// <summary>
    /// Interface for sync job execution engine
    /// </summary>
    public interface ISyncEngine
    {
        Task<bool> ExecuteJobAsync(SyncJobModel job);
        void StopJob(int jobId);
        bool IsJobRunning(int jobId);
        SyncJobStatus GetJobExecutionStatus(int jobId);
        
        // Events
        event EventHandler<SyncProgressEventArgs> ProgressUpdated;
        event EventHandler<SyncCompletedEventArgs> JobCompleted;
        event EventHandler<SyncStartedEventArgs> JobStarted;
    }

    /// <summary>
    /// Status of a sync job execution
    /// </summary>
    public enum SyncJobStatus
    {
        NotRunning,
        Starting,
        Running,
        Stopping,
        Completed,
        Failed,
        Cancelled
    }

    /// <summary>
    /// Event arguments for sync progress updates
    /// </summary>
    public class SyncProgressEventArgs : EventArgs
    {
        public int JobId { get; set; }
        public string JobName { get; set; } = string.Empty;
        public string CurrentFile { get; set; } = string.Empty;
        public long FilesProcessed { get; set; }
        public long TotalFiles { get; set; }
        public long BytesTransferred { get; set; }
        public long TotalBytes { get; set; }
        public double ProgressPercentage { get; set; }
        public TimeSpan ElapsedTime { get; set; }
        public double TransferRate { get; set; } // bytes per second
        public string Phase { get; set; } = string.Empty; // "Scanning", "Transferring", "Cleanup"
    }

    /// <summary>
    /// Event arguments for sync completion
    /// </summary>
    public class SyncCompletedEventArgs : EventArgs
    {
        public int JobId { get; set; }
        public string JobName { get; set; } = string.Empty;
        public bool Success { get; set; }
        public string? ErrorMessage { get; set; }
        public long FilesTransferred { get; set; }
        public long FilesSkipped { get; set; }
        public long FilesDeleted { get; set; }
        public long BytesTransferred { get; set; }
        public TimeSpan Duration { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public SyncJobStatus FinalStatus { get; set; }
    }

    /// <summary>
    /// Event arguments for sync start
    /// </summary>
    public class SyncStartedEventArgs : EventArgs
    {
        public int JobId { get; set; }
        public string JobName { get; set; } = string.Empty;
        public DateTime StartTime { get; set; }
        public string SourcePath { get; set; } = string.Empty;
        public string DestinationPath { get; set; } = string.Empty;
    }
}