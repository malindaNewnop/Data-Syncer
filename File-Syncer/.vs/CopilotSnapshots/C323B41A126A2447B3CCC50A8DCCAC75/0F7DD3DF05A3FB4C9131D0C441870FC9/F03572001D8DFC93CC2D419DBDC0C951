using System;

namespace Syncer.Core.Models
{
    /// <summary>
    /// Represents connection settings for file transfer operations
    /// </summary>
    [Serializable]
    public class ConnectionSettings
    {
        #region Properties
        
        /// <summary>
        /// Gets or sets the hostname or IP address of the remote server
        /// </summary>
        public string Host { get; set; }
        
        /// <summary>
        /// Gets or sets the port number for the connection
        /// </summary>
        public int Port { get; set; }
        
        /// <summary>
        /// Gets or sets the username for authentication
        /// </summary>
        public string Username { get; set; }
        
        /// <summary>
        /// Gets or sets the password for authentication
        /// </summary>
        public string Password { get; set; }
        
        /// <summary>
        /// Gets or sets the transfer protocol to use
        /// </summary>
        public TransferProtocol Protocol { get; set; }
        
        /// <summary>
        /// Gets or sets the local source path
        /// </summary>
        public string LocalPath { get; set; }
        
        /// <summary>
        /// Gets or sets the remote destination path
        /// </summary>
        public string RemotePath { get; set; }
        
        /// <summary>
        /// Gets or sets the transfer direction
        /// </summary>
        public TransferDirection Direction { get; set; }
        
        /// <summary>
        /// Gets or sets whether to use passive mode for FTP
        /// </summary>
        public bool UsePassiveMode { get; set; }
        
        /// <summary>
        /// Gets or sets whether to use SSL/TLS encryption
        /// </summary>
        public bool UseSSL { get; set; }
        
        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the ConnectionSettings class with default values
        /// </summary>
        public ConnectionSettings()
        {
            Port = 21; // Default FTP port
            Protocol = TransferProtocol.FTP;
            Direction = TransferDirection.Upload;
            UsePassiveMode = true;
            UseSSL = false;
        }

        #endregion

        #region Methods

        /// <summary>
        /// Validates the connection settings
        /// </summary>
        /// <returns>True if settings are valid, false otherwise</returns>
        public bool IsValid()
        {
            if (Protocol == TransferProtocol.Local)
            {
                return !string.IsNullOrEmpty(LocalPath) && !string.IsNullOrEmpty(RemotePath);
            }

            return !string.IsNullOrEmpty(Host) &&
                   !string.IsNullOrEmpty(Username) &&
                   !string.IsNullOrEmpty(LocalPath) &&
                   !string.IsNullOrEmpty(RemotePath) &&
                   Port > 0 && Port <= 65535;
        }

        /// <summary>
        /// Creates a copy of the current connection settings
        /// </summary>
        /// <returns>A new ConnectionSettings instance with copied values</returns>
        public ConnectionSettings Clone()
        {
            return new ConnectionSettings
            {
                Host = this.Host,
                Port = this.Port,
                Username = this.Username,
                Password = this.Password,
                Protocol = this.Protocol,
                LocalPath = this.LocalPath,
                RemotePath = this.RemotePath,
                Direction = this.Direction,
                UsePassiveMode = this.UsePassiveMode,
                UseSSL = this.UseSSL
            };
        }

        #endregion
    }
}
