using System;

namespace Syncer.Core.Models
{
    /// <summary>
    /// Represents a log entry for file transfer operations
    /// </summary>
    [Serializable]
    public class TransferLog
    {
        #region Properties

        /// <summary>
        /// Gets or sets the unique identifier for this log entry
        /// </summary>
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the ID of the job that generated this log entry
        /// </summary>
        public Guid JobId { get; set; }

        /// <summary>
        /// Gets or sets the name of the job that generated this log entry
        /// </summary>
        public string JobName { get; set; }

        /// <summary>
        /// Gets or sets the timestamp when the log entry was created
        /// </summary>
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or sets the log level (Info, Warning, Error, Success)
        /// </summary>
        public LogLevel Level { get; set; }

        /// <summary>
        /// Gets or sets the log message
        /// </summary>
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets the file name that was being processed (if applicable)
        /// </summary>
        public string FileName { get; set; }

        /// <summary>
        /// Gets or sets the source path of the file
        /// </summary>
        public string SourcePath { get; set; }

        /// <summary>
        /// Gets or sets the destination path of the file
        /// </summary>
        public string DestinationPath { get; set; }

        /// <summary>
        /// Gets or sets the file size in bytes
        /// </summary>
        public long FileSize { get; set; }

        /// <summary>
        /// Gets or sets the transfer duration in milliseconds
        /// </summary>
        public long DurationMs { get; set; }

        /// <summary>
        /// Gets or sets the transfer protocol used
        /// </summary>
        public TransferProtocol Protocol { get; set; }

        /// <summary>
        /// Gets or sets whether the operation was successful
        /// </summary>
        public bool IsSuccess { get; set; }

        /// <summary>
        /// Gets or sets the error details (if any)
        /// </summary>
        public string ErrorDetails { get; set; }

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the TransferLog class
        /// </summary>
        public TransferLog()
        {
            Id = Guid.NewGuid();
            Timestamp = DateTime.Now;
            Level = LogLevel.Info;
            Message = string.Empty;
            FileName = string.Empty;
            SourcePath = string.Empty;
            DestinationPath = string.Empty;
            FileSize = 0;
            DurationMs = 0;
            Protocol = TransferProtocol.FTP;
            IsSuccess = false;
            ErrorDetails = string.Empty;
        }

        /// <summary>
        /// Initializes a new instance of the TransferLog class with specified parameters
        /// </summary>
        /// <param name="jobId">The ID of the job</param>
        /// <param name="jobName">The name of the job</param>
        /// <param name="level">The log level</param>
        /// <param name="message">The log message</param>
        public TransferLog(Guid jobId, string jobName, LogLevel level, string message) : this()
        {
            JobId = jobId;
            JobName = jobName;
            Level = level;
            Message = message;
        }

        #endregion

        #region Methods

        /// <summary>
        /// Creates a log entry for a successful file transfer
        /// </summary>
        /// <param name="jobId">The job ID</param>
        /// <param name="jobName">The job name</param>
        /// <param name="fileName">The transferred file name</param>
        /// <param name="sourcePath">The source path</param>
        /// <param name="destinationPath">The destination path</param>
        /// <param name="fileSize">The file size in bytes</param>
        /// <param name="durationMs">The transfer duration in milliseconds</param>
        /// <param name="protocol">The transfer protocol used</param>
        /// <returns>A new TransferLog instance</returns>
        public static TransferLog CreateSuccessLog(Guid jobId, string jobName, string fileName, 
            string sourcePath, string destinationPath, long fileSize, long durationMs, TransferProtocol protocol)
        {
            return new TransferLog
            {
                JobId = jobId,
                JobName = jobName,
                Level = LogLevel.Success,
                Message = $"Successfully transferred '{fileName}'",
                FileName = fileName,
                SourcePath = sourcePath,
                DestinationPath = destinationPath,
                FileSize = fileSize,
                DurationMs = durationMs,
                Protocol = protocol,
                IsSuccess = true
            };
        }

        /// <summary>
        /// Creates a log entry for a failed file transfer
        /// </summary>
        /// <param name="jobId">The job ID</param>
        /// <param name="jobName">The job name</param>
        /// <param name="fileName">The file name that failed to transfer</param>
        /// <param name="sourcePath">The source path</param>
        /// <param name="errorMessage">The error message</param>
        /// <param name="protocol">The transfer protocol used</param>
        /// <returns>A new TransferLog instance</returns>
        public static TransferLog CreateErrorLog(Guid jobId, string jobName, string fileName, 
            string sourcePath, string errorMessage, TransferProtocol protocol)
        {
            return new TransferLog
            {
                JobId = jobId,
                JobName = jobName,
                Level = LogLevel.Error,
                Message = $"Failed to transfer '{fileName}': {errorMessage}",
                FileName = fileName,
                SourcePath = sourcePath,
                Protocol = protocol,
                IsSuccess = false,
                ErrorDetails = errorMessage
            };
        }

        /// <summary>
        /// Creates a general information log entry
        /// </summary>
        /// <param name="jobId">The job ID</param>
        /// <param name="jobName">The job name</param>
        /// <param name="message">The information message</param>
        /// <returns>A new TransferLog instance</returns>
        public static TransferLog CreateInfoLog(Guid jobId, string jobName, string message)
        {
            return new TransferLog(jobId, jobName, LogLevel.Info, message);
        }

        /// <summary>
        /// Creates a warning log entry
        /// </summary>
        /// <param name="jobId">The job ID</param>
        /// <param name="jobName">The job name</param>
        /// <param name="message">The warning message</param>
        /// <returns>A new TransferLog instance</returns>
        public static TransferLog CreateWarningLog(Guid jobId, string jobName, string message)
        {
            return new TransferLog(jobId, jobName, LogLevel.Warning, message);
        }

        /// <summary>
        /// Returns a formatted string representation of the log entry
        /// </summary>
        /// <returns>Formatted log string</returns>
        public override string ToString()
        {
            return $"[{Timestamp:yyyy-MM-dd HH:mm:ss}] [{Level}] {JobName}: {Message}";
        }

        /// <summary>
        /// Gets the transfer speed in bytes per second (if applicable)
        /// </summary>
        /// <returns>Transfer speed in bytes per second, or 0 if not applicable</returns>
        public double GetTransferSpeedBytesPerSecond()
        {
            if (DurationMs > 0 && FileSize > 0)
            {
                return (double)FileSize / (DurationMs / 1000.0);
            }
            return 0;
        }

        /// <summary>
        /// Gets a human-readable file size string
        /// </summary>
        /// <returns>Formatted file size string</returns>
        public string GetFormattedFileSize()
        {
            if (FileSize == 0) return "0 B";

            string[] units = { "B", "KB", "MB", "GB", "TB" };
            double size = FileSize;
            int unitIndex = 0;

            while (size >= 1024 && unitIndex < units.Length - 1)
            {
                size /= 1024;
                unitIndex++;
            }

            return $"{size:F2} {units[unitIndex]}";
        }

        #endregion
    }
