using System;

namespace Syncer.Core.Models
{
    /// <summary>
    /// Represents a complete file transfer job configuration
    /// </summary>
    [Serializable]
    public class TransferJob
    {
        #region Properties

        /// <summary>
        /// Gets or sets the unique identifier for this job
        /// </summary>
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the display name for this job
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the description of this job
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the connection settings for this job
        /// </summary>
        public ConnectionSettings ConnectionSettings { get; set; }

        /// <summary>
        /// Gets or sets the filter settings for this job
        /// </summary>
        public FilterSettings FilterSettings { get; set; }

        /// <summary>
        /// Gets or sets the schedule settings for this job
        /// </summary>
        public ScheduleSettings ScheduleSettings { get; set; }

        /// <summary>
        /// Gets or sets the current status of this job
        /// </summary>
        public JobStatus Status { get; set; }

        /// <summary>
        /// Gets or sets the date and time when this job was created
        /// </summary>
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Gets or sets the date and time when this job was last modified
        /// </summary>
        public DateTime ModifiedDate { get; set; }

        /// <summary>
        /// Gets or sets the date and time of the last successful run
        /// </summary>
        public DateTime? LastRunDate { get; set; }

        /// <summary>
        /// Gets or sets the date and time of the next scheduled run
        /// </summary>
        public DateTime? NextRunDate { get; set; }

        /// <summary>
        /// Gets or sets the last error message (if any)
        /// </summary>
        public string LastError { get; set; }

        /// <summary>
        /// Gets or sets the total number of files transferred in the last run
        /// </summary>
        public int LastRunFileCount { get; set; }

        /// <summary>
        /// Gets or sets the total bytes transferred in the last run
        /// </summary>
        public long LastRunBytesTransferred { get; set; }

        /// <summary>
        /// Gets or sets whether this job is enabled for execution
        /// </summary>
        public bool IsEnabled { get; set; }

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the TransferJob class
        /// </summary>
        public TransferJob()
        {
            Id = Guid.NewGuid();
            Name = "New Transfer Job";
            Description = string.Empty;
            ConnectionSettings = new ConnectionSettings();
            FilterSettings = new FilterSettings();
            ScheduleSettings = new ScheduleSettings();
            Status = JobStatus.Stopped;
            CreatedDate = DateTime.Now;
            ModifiedDate = DateTime.Now;
            LastRunDate = null;
            NextRunDate = null;
            LastError = string.Empty;
            LastRunFileCount = 0;
            LastRunBytesTransferred = 0;
            IsEnabled = true;
        }

        /// <summary>
        /// Initializes a new instance of the TransferJob class with a specified name
        /// </summary>
        /// <param name="name">The name of the job</param>
        public TransferJob(string name) : this()
        {
            Name = name;
        }

        #endregion

        #region Methods

        /// <summary>
        /// Validates the transfer job configuration
        /// </summary>
        /// <returns>True if the job is valid, false otherwise</returns>
        public bool IsValid()
        {
            if (string.IsNullOrEmpty(Name))
                return false;

            if (ConnectionSettings == null || !ConnectionSettings.IsValid())
                return false;

            if (FilterSettings == null || !FilterSettings.IsValid())
                return false;

            if (ScheduleSettings == null || !ScheduleSettings.IsValid())
                return false;

            return true;
        }

        /// <summary>
        /// Updates the job's modification date to the current time
        /// </summary>
        public void MarkAsModified()
        {
            ModifiedDate = DateTime.Now;
        }

        /// <summary>
        /// Updates the job's last run information
        /// </summary>
        /// <param name="fileCount">Number of files transferred</param>
        /// <param name="bytesTransferred">Total bytes transferred</param>
        /// <param name="error">Error message, if any</param>
        public void UpdateLastRun(int fileCount, long bytesTransferred, string error = null)
        {
            LastRunDate = DateTime.Now;
            LastRunFileCount = fileCount;
            LastRunBytesTransferred = bytesTransferred;
            LastError = error ?? string.Empty;
            
            if (ScheduleSettings.IsEnabled && ScheduleSettings.IsRecurring)
            {
                NextRunDate = ScheduleSettings.GetNextRunTime();
            }
            
            MarkAsModified();
        }

        /// <summary>
        /// Creates a deep copy of the current transfer job
        /// </summary>
        /// <returns>A new TransferJob instance with copied values</returns>
        public TransferJob Clone()
        {
            return new TransferJob
            {
                Id = Guid.NewGuid(), // Generate new ID for clone
                Name = this.Name + " (Copy)",
                Description = this.Description,
                ConnectionSettings = this.ConnectionSettings?.Clone(),
                FilterSettings = this.FilterSettings?.Clone(),
                ScheduleSettings = this.ScheduleSettings?.Clone(),
                Status = JobStatus.Stopped, // Always start cloned jobs as stopped
                CreatedDate = DateTime.Now,
                ModifiedDate = DateTime.Now,
                LastRunDate = null,
                NextRunDate = null,
                LastError = string.Empty,
                LastRunFileCount = 0,
                LastRunBytesTransferred = 0,
                IsEnabled = this.IsEnabled
            };
        }

        /// <summary>
        /// Returns a string representation of the transfer job
        /// </summary>
        /// <returns>String representation</returns>
        public override string ToString()
        {
            return $"{Name} ({Status})";
        }

        #endregion
    }
}
