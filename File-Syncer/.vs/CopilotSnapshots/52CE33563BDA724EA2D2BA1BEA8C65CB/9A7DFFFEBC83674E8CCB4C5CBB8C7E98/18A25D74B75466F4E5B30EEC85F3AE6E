using System;
using System.Collections.Generic;
using System.Linq;

namespace Syncer.Core.Models
{
    /// <summary>
    /// Represents file filtering settings for transfer operations
    /// </summary>
    [Serializable]
    public class FilterSettings
    {
        #region Properties

        /// <summary>
        /// Gets or sets the list of file extensions to include (e.g., ".txt", ".csv")
        /// </summary>
        public List<string> FileExtensions { get; set; }

        /// <summary>
        /// Gets or sets the minimum file size in bytes (0 = no minimum)
        /// </summary>
        public long MinFileSize { get; set; }

        /// <summary>
        /// Gets or sets the maximum file size in bytes (0 = no maximum)
        /// </summary>
        public long MaxFileSize { get; set; }

        /// <summary>
        /// Gets or sets the minimum file age in minutes (0 = no minimum)
        /// </summary>
        public int MinFileAgeMinutes { get; set; }

        /// <summary>
        /// Gets or sets whether to include subdirectories in the scan
        /// </summary>
        public bool IncludeSubfolders { get; set; }

        /// <summary>
        /// Gets or sets whether to delete source files after successful transfer
        /// </summary>
        public bool DeleteSourceAfterTransfer { get; set; }

        /// <summary>
        /// Gets or sets whether to move source files to archive folder after transfer
        /// </summary>
        public bool MoveToArchiveAfterTransfer { get; set; }

        /// <summary>
        /// Gets or sets the archive folder path (used when MoveToArchiveAfterTransfer is true)
        /// </summary>
        public string ArchivePath { get; set; }

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the FilterSettings class with default values
        /// </summary>
        public FilterSettings()
        {
            FileExtensions = new List<string>();
            MinFileSize = 0;
            MaxFileSize = 0;
            MinFileAgeMinutes = 0;
            IncludeSubfolders = false;
            DeleteSourceAfterTransfer = false;
            MoveToArchiveAfterTransfer = false;
            ArchivePath = string.Empty;
        }

        #endregion

        #region Methods

        /// <summary>
        /// Determines if a file matches the current filter criteria
        /// </summary>
        /// <param name="filePath">The file path to check</param>
        /// <param name="fileSize">The file size in bytes</param>
        /// <param name="lastWriteTime">The file's last write time</param>
        /// <returns>True if the file matches the filter, false otherwise</returns>
        public bool MatchesFilter(string filePath, long fileSize, DateTime lastWriteTime)
        {
            // Check file extension
            if (FileExtensions.Count > 0)
            {
                string extension = System.IO.Path.GetExtension(filePath);
                if (!FileExtensions.Any(ext => string.Equals(ext, extension, StringComparison.OrdinalIgnoreCase)))
                {
                    return false;
                }
            }

            // Check file size
            if (MinFileSize > 0 && fileSize < MinFileSize)
                return false;

            if (MaxFileSize > 0 && fileSize > MaxFileSize)
                return false;

            // Check file age
            if (MinFileAgeMinutes > 0)
            {
                TimeSpan age = DateTime.Now - lastWriteTime;
                if (age.TotalMinutes < MinFileAgeMinutes)
                    return false;
            }

            return true;
        }

        /// <summary>
        /// Validates the filter settings
        /// </summary>
        /// <returns>True if settings are valid, false otherwise</returns>
        public bool IsValid()
        {
            // If moving to archive, archive path must be specified
            if (MoveToArchiveAfterTransfer && string.IsNullOrEmpty(ArchivePath))
                return false;

            // Cannot both delete and move to archive
            if (DeleteSourceAfterTransfer && MoveToArchiveAfterTransfer)
                return false;

            // Min size cannot be greater than max size (if both specified)
            if (MinFileSize > 0 && MaxFileSize > 0 && MinFileSize > MaxFileSize)
                return false;

            return true;
        }

        /// <summary>
        /// Creates a copy of the current filter settings
        /// </summary>
        /// <returns>A new FilterSettings instance with copied values</returns>
        public FilterSettings Clone()
        {
            return new FilterSettings
            {
                FileExtensions = new List<string>(this.FileExtensions),
                MinFileSize = this.MinFileSize,
                MaxFileSize = this.MaxFileSize,
                MinFileAgeMinutes = this.MinFileAgeMinutes,
                IncludeSubfolders = this.IncludeSubfolders,
                DeleteSourceAfterTransfer = this.DeleteSourceAfterTransfer,
                MoveToArchiveAfterTransfer = this.MoveToArchiveAfterTransfer,
                ArchivePath = this.ArchivePath
            };
        }

        #endregion
    }
}
